-- Connor Cooke
-- CEC383
-- 11239140

*Main> f x = x + 1
*Main> g x = x * 2
*Main> h x = x * 3

*Main> compose3 f g h 1
7.0
#( (( 1 *2) *3) +1) = (6 + 1) = 7

*Main> compose3 f g h 2 
13.0
# (((2 *2) *3) +1) = (12 + 1) = 13

*Main> compose3 h f g 2 
15.0
# (((2 *2) +1) *3) = ((4+1) *3) = (5*3) = 15

*Main> compose3 h f g 1
9.0
# (((1 *2) +1) *3) = ((2+1) *3) = (3*3) = 9

*Main> compose3 f f f 1 
4.0
# ((1+1) +1) +1) = 4

*Main> compose3 f f g 1 
4.0
# (((1*2) +1) +1) = ((2 +1) +1) = 4

*Main> compose3 f g f 1 
5.0
# (((1 +1) *2) +1) = ((2 *2) +1) = (4 +1) = 5

*Main> compose3 g f f 1 
6.0
# (((1 +1) +1) *2) = (3 *2) = 6


#I decided to include a generic version that can receive any three functions and as long
#as their output has the same type as the input of the next function it will be valid
*Main> f x = x / 2
*Main> g x = div x 2
*Main> compose3AnyType f fromIntegral g 3
0.5
#(fromIntegral(div 3 2)) / 2 = (fromIntegral(1)) / 2 = 1.0 / 2 = 0.5

*Main> compose3AnyType g ceiling f 3
1
# div (ceiling (3/2)) 2 = div (ceiling 1.5) 2 = div 2 2 = 1

